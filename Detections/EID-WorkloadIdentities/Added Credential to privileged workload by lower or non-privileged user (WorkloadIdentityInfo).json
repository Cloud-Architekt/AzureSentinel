{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8a790672-0ad9-403a-a80d-f67bd0b7fea6')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8a790672-0ad9-403a-a80d-f67bd0b7fea6')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "Added Credential to privileged workload by lower or non-privileged user (WorkloadIdentityInfo)",
                "description": "This will alert when a unprivileged or lower privileged user adds a new credential to an Application or Service Principal object. Monitor these changes to avoid account take over (for persistent access) and breach of tiering model. If a threat actor obtains access to the workload identity with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.",
                "severity": "Medium",
                "enabled": true,
                "query": "// Exclude automated rotation of certificates for Managed Identities by Azure Back-end / IDMS\nlet ExcludedActor = dynamic ([\"Managed Service Identity\", \"Windows Azure Service Management API\"]);\nAuditLogs\n// Captures \"Add service principal\", \"Add service principal credentials\", and \"Update application - Certificates and secrets management\" events\n| where OperationName has_any (\"Add service principal\", \"Certificates and secrets management\", \"Update application\")\n| where Result =~ \"success\"\n| where parse_json(tostring(InitiatedBy.app)).displayName !in~ (ExcludedActor) and parse_json(tostring(InitiatedBy.app)).appId != \"null\"\n| extend InitiatingUserOrAppId = iff(isnotempty(InitiatedBy.user.id), tostring(InitiatedBy.user.id), tostring(InitiatedBy.app.id))\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| join kind=leftouter (UnifiedIdentityInfo\n    | project\n        ObjectId,\n        InitiatingUserOrAppClassification = Classification,\n        InitiatingUserOrAppName = ObjectDisplayName,\n        InitiatingUserOrAppDirectoryRoles = EntraIdRoles,\n        InitiatingUserOrAppGraphRoles = AppRoles)\n    on $left.InitiatingUserOrAppId == $right.ObjectId\n| mv-apply TargetResource = TargetResources on \n    (\n    where TargetResource.type =~ \"Application\" or TargetResource.type =~ \"ServicePrincipal\"\n    | extend\n        TargetName = tostring(TargetResource.displayName),\n        ResourceId = tostring(TargetResource.id),\n        WorkloadIdentityObjectType = tostring(TargetResource.type),\n        keyEvents = TargetResource.modifiedProperties\n    )\n| mv-apply Property = keyEvents on \n    (\n    where Property.displayName =~ \"KeyDescription\" or Property.displayName =~ \"FederatedIdentityCredentials\"\n    | extend\n        new_value_set = parse_json(tostring(Property.newValue)),\n        old_value_set = parse_json(tostring(Property.oldValue))\n    )\n| extend diff = set_difference(new_value_set, old_value_set)\n| where isnotempty(diff)\n| parse diff with * \"KeyIdentifier=\" keyIdentifier: string \",KeyType=\" keyType: string \",KeyUsage=\" keyUsage: string \",DisplayName=\" keyDisplayName: string \"]\" *\n| where keyUsage =~ \"Verify\" or isnotempty(parse_json(tostring(diff[0].Audiences))[0])\n| mv-apply AdditionalDetail = AdditionalDetails on \n    (\n    where AdditionalDetail.key =~ \"User-Agent\"\n    | extend UserAgent = tostring(AdditionalDetail.value)\n    )\n| mv-apply AdditionalDetail = AdditionalDetails on \n    (\n    where AdditionalDetail.key =~ \"AppId\"\n    | extend ApplicationId = tostring(AdditionalDetail.value)\n    )\n| join kind=leftouter (PrivilegedWorkloadIdentityInfo\n    | extend WorkloadIdClassification = EnterpriseAccessModelTiering\n    | extend WorkloadIdentityObjectId = ServicePrincipalObjectId)\n    on ApplicationId\n| extend CredentialName = iff(isnotempty(keyDisplayName), keyDisplayName, diff[0].Name)\n| extend CredentialIdentifier = iff(isnotempty(keyIdentifier), keyIdentifier, diff[0].Subject)\n| extend CredentialType = iff(isnotempty(keyType), keyType, keyEvents[0].displayName)\n| extend CredentialUsage = iff(isnotempty(keyUsage), keyUsage, tostring(diff[0].Audiences))\n// Use Target Name if Workload Identity Name is unknown\n| extend WorkloadIdentityName = iff(isempty(WorkloadIdentityName), TargetName, WorkloadIdentityName)\n// Compare Classification of Application with Actor to detect \"Tiering\" breach, Allowlist all Control Plane roles\n| where parse_json(tostring(parse_json(InitiatingUserOrAppClassification))) !contains WorkloadIdClassification and (parse_json(tostring(parse_json(InitiatingUserOrAppClassification))) !contains \"ControlPlane\")\n// Optional: Exclude all Apps with Unclassified Permissions\n//| where WorkloadIdClassification != \"Unclassified\"\n| extend Severity = iff(WorkloadIdClassification contains \"ControlPlane\", \"High\", \"Medium\")\n\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Persistence",
                    "PrivilegeEscalation",
                    "DefenseEvasion"
                ],
                "techniques": [
                    "T1078",
                    "T1550"
                ],
                "alertRuleTemplateName": "8a790672-0ad9-403a-a80d-f67bd0b7fea6",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [
                            "Account",
                            "IP",
                            "CloudApplication"
                        ],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "AlertPerResult"
                },
                "alertDetailsOverride": {
                    "alertDisplayNameFormat": "Added {{CredentialType}} to workload with {{WorkloadIdClassification}} privileges by {{InitiatingUserOrAppClassification}} user",
                    "alertDescriptionFormat": "{{InitiatingUserOrAppName}} has added a credential for {{WorkloadIdentityName}} on {{WorkloadIdClassification}}. Verify this change to avoid account take over (for persistent access) and breach of tiering model. If a threat actor obtains access to the workload identity with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.",
                    "alertSeverityColumnName": "Severity",
                    "alertDynamicProperties": []
                },
                "customDetails": {
                    "WorkloadIdentityName": "WorkloadIdentityName",
                    "WorkloadIdentityType": "WorkloadIdentityType",
                    "ServicePrincipalId": "ServicePrincipalObjectId",
                    "ApplicationId": "ServicePrincipalObjectId",
                    "IsFirstPartyApps": "IsFirstPartyApp",
                    "PrivilegedAccess": "WorkloadIdClassification",
                    "EntraDirectoryRoles": "EntraIdRoles",
                    "MSGraphRoles": "AppRolePermissions",
                    "CredentialIdentifier": "CredentialIdentifier",
                    "CredentialType": "CredentialType",
                    "CredentialUsage": "CredentialUsage"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "AadUserId",
                                "columnName": "InitiatingUserOrAppId"
                            }
                        ]
                    },
                    {
                        "entityType": "CloudApplication",
                        "fieldMappings": [
                            {
                                "identifier": "AppId",
                                "columnName": "ApplicationId"
                            }
                        ]
                    },
                    {
                        "entityType": "CloudApplication",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "WorkloadIdentityName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "InitiatingIpAddress"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.0.0"
            }
        }
    ]
}